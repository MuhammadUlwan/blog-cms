name: Laravel CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  laravel_build:
    name: Laravel Build
    runs-on: ubuntu-latest
    env:
      DB_DATABASE: polindra
      DB_USERNAME: root
      DB_PASSWORD: Polindra123
      TELEGRAM_BOT: ${{ secrets.TELEGRAM_BOT }}
      TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}
      TELEGRAM_DEPLOY: ${{ secrets.TELEGRAM_DEPLOY }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      ENV_FILE_CONTENT: ${{ secrets.ENV_FILE_CONTENT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, pdo, mysql, gd

      - name: Install dependencies
        run: composer install --no-ansi --no-interaction --no-progress --optimize-autoloader

      - name: Copy file example env
        run: cp .env.example .env

      - name: Generate key
        run: php artisan key:generate

      - name: Run Migration Database
        run: php artisan migrate:fresh --seed

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Install Node.js dependencies
        run: npm install

      - name: Build Node.JS
        run: npm run build

      - name: Create artifact
        run: zip -r artifact.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact
          path: artifact.zip
          retention-days: 5

  laravel_notification:
    name: Laravel Notify
    runs-on: ubuntu-latest
    needs: laravel_build
    if: always()
    steps:
      - name: Notify to Telegram
        run: |
          if [[ "${{ needs.laravel_build.result }}" == "success" ]]; then
            STATUS="CI/CD Pipeline <b>Success ‚úÖ</b>"
          else
            STATUS="CI/CD Pipeline <b>Failure ‚ùå</b>"
          fi
          curl --request POST ${{ secrets.TELEGRAM_BOT }} \
            -d parse_mode="HTML" \
            -d chat_id="${{ secrets.TELEGRAM_CHANNEL }}" \
            -d text="
            %0Aüìù Status: $STATUS
            %0Aüìù Commit: $GITHUB_SHA
            %0Aüìù Branch: $GITHUB_REF_NAME
            %0Aüí¨ Message: <b>${{ github.event.head_commit.message }}</b>
            %0ACek disini: ${{ github.run_url }}
            "

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: laravel_build
    if: always()
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: .

      - name: Check if artifact exists
        run: ls -lh artifact.zip

      - name: Send File to Telegram
        run: |
          if [ -f "artifact.zip" ]; then
            curl --request POST ${{ secrets.TELEGRAM_DEPLOY }} \
              --header 'Accept: /' \
              --form 'chat_id="${{ secrets.TELEGRAM_CHANNEL }}"' \
              --form caption="${{ github.run_url }}" \
              --form document=@./artifact.zip
          else
            echo "Artifact file not found!"
          fi

      - name: Unzip artifact
        run: unzip -o artifact.zip

      - name: Add SSH key
        run: |
          echo "${{ secrets.ID_RSA }}" > ssh_private_key_cicd_polindra
          chmod 600 ssh_private_key_cicd_polindra

      - name: Deploy to Server
        env:
          ID_RSA: ${{ secrets.ID_RSA }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          ENV_FILE_CONTENT: ${{ secrets.ENV_FILE_CONTENT }}
          DEPLOY_PATH: /var/www/laravel/
        run: |
          echo "Deploying application..."
          rm -f -R .git && rm -f artifact.zip
          zip -r artifact.zip .
          rsync -avz ---progress --stats -e "ssh -i ssh_private_key_cicd_polindra -o StrictHostKeyChecking=no -p $SSH_PORT" artifact.zip $SERVER_USER@$SERVER_IP:$DEPLOY_PATH
          ssh -i ssh_private_key_cicd_polindra -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP -p $SSH_PORT 'find $DEPLOY_PATH -mindepth 1 ! -name artifact.zip -delete'
          ssh -i ssh_private_key_cicd_polindra -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP -p $SSH_PORT 'cd $DEPLOY_PATH && unzip -o artifact.zip && rm -f artifact.zip'

      - name: Fill .env
        run: |
          ssh -i ssh_private_key_cicd_polindra -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP -p $SSH_PORT 'echo "$ENV_FILE_CONTENT" > $DEPLOY_PATH.env'

      - name: Run Migration in Database Server
        run: |
          ssh -i id_rsa -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP -p $SSH_PORT 'cd $DEPLOY_PATH && php artisan migrate --force'

      - name: Delete SSH Key
        run: rm -f ssh_private_key_cicd_polindra